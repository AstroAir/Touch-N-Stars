{"version":3,"file":"js/463.1da7d1ce.js","mappings":"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","sources":["webpack://nina-webapp/../../src/web.ts"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\n\nimport type {\n  AppendFileOptions,\n  CopyOptions,\n  CopyResult,\n  DeleteFileOptions,\n  FilesystemPlugin,\n  GetUriOptions,\n  GetUriResult,\n  MkdirOptions,\n  PermissionStatus,\n  ReadFileOptions,\n  ReadFileResult,\n  ReaddirOptions,\n  ReaddirResult,\n  RenameOptions,\n  RmdirOptions,\n  StatOptions,\n  StatResult,\n  WriteFileOptions,\n  WriteFileResult,\n  Directory,\n  DownloadFileOptions,\n  DownloadFileResult,\n  ProgressStatus,\n} from './definitions';\nimport { Encoding } from './definitions';\n\nfunction resolve(path: string): string {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix: string[] = [];\n\n  posix.forEach(item => {\n    if (\n      item === '..' &&\n      newPosix.length > 0 &&\n      newPosix[newPosix.length - 1] !== '..'\n    ) {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n\n  return newPosix.join('/');\n}\nfunction isPathParent(parent: string, children: string): boolean {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n\n  return (\n    parent !== children &&\n    pathsA.every((value, index) => value === pathsB[index])\n  );\n}\n\nexport class FilesystemWeb extends WebPlugin implements FilesystemPlugin {\n  DB_VERSION = 1;\n  DB_NAME = 'Disc';\n\n  private _writeCmds: string[] = ['add', 'put', 'delete'];\n  private _db?: IDBDatabase;\n  static _debug = true;\n  async initDb(): Promise<IDBDatabase> {\n    if (this._db !== undefined) {\n      return this._db;\n    }\n    if (!('indexedDB' in window)) {\n      throw this.unavailable(\"This browser doesn't support IndexedDB\");\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n      request.onupgradeneeded = FilesystemWeb.doUpgrade;\n      request.onsuccess = () => {\n        this._db = request.result;\n        resolve(request.result);\n      };\n      request.onerror = () => reject(request.error);\n      request.onblocked = () => {\n        console.warn('db blocked');\n      };\n    });\n  }\n\n  static doUpgrade(event: IDBVersionChangeEvent): void {\n    const eventTarget = event.target as IDBOpenDBRequest;\n    const db = eventTarget.result;\n    switch (event.oldVersion) {\n      case 0:\n      case 1:\n      default: {\n        if (db.objectStoreNames.contains('FileStorage')) {\n          db.deleteObjectStore('FileStorage');\n        }\n        const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n        store.createIndex('by_folder', 'folder');\n      }\n    }\n  }\n\n  async dbRequest(cmd: string, args: any[]): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: any = tx.objectStore('FileStorage');\n        const req = store[cmd](...args);\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  async dbIndexRequest(\n    indexName: string,\n    cmd: string,\n    args: [any],\n  ): Promise<any> {\n    const readFlag =\n      this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n    return this.initDb().then((conn: IDBDatabase) => {\n      return new Promise<IDBObjectStore>((resolve, reject) => {\n        const tx: IDBTransaction = conn.transaction(['FileStorage'], readFlag);\n        const store: IDBObjectStore = tx.objectStore('FileStorage');\n        const index: any = store.index(indexName);\n        const req = index[cmd](...args) as any;\n        req.onsuccess = () => resolve(req.result);\n        req.onerror = () => reject(req.error);\n      });\n    });\n  }\n\n  private getPath(\n    directory: Directory | undefined,\n    uriPath: string | undefined,\n  ): string {\n    const cleanedUriPath =\n      uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n    let fsPath = '';\n    if (directory !== undefined) fsPath += '/' + directory;\n    if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n    return fsPath;\n  }\n\n  async clear(): Promise<void> {\n    const conn: IDBDatabase = await this.initDb();\n    const tx: IDBTransaction = conn.transaction(['FileStorage'], 'readwrite');\n    const store: IDBObjectStore = tx.objectStore('FileStorage');\n    store.clear();\n  }\n\n  /**\n   * Read a file from disk\n   * @param options options for the file read\n   * @return a promise that resolves with the read file data result\n   */\n  async readFile(options: ReadFileOptions): Promise<ReadFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    // const encoding = options.encoding;\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    return { data: entry.content ? entry.content : '' };\n  }\n\n  /**\n   * Write a file to disk in the specified location on device\n   * @param options options for the file write\n   * @return a promise that resolves with the file write result\n   */\n  async writeFile(options: WriteFileOptions): Promise<WriteFileResult> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const doRecursive = options.recursive;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: doRecursive,\n        });\n      }\n    }\n\n    if (!encoding && !(data instanceof Blob)) {\n      data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n      if (!this.isBase64String(data))\n        throw Error('The supplied data is not valid base64 content.');\n    }\n\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data instanceof Blob ? data.size : data.length,\n      ctime: now,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n    return {\n      uri: pathObj.path,\n    };\n  }\n\n  /**\n   * Append to a file on disk in the specified location on device\n   * @param options options for the file append\n   * @return a promise that resolves with the file write result\n   */\n  async appendFile(options: AppendFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    let data = options.data;\n    const encoding = options.encoding;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const now = Date.now();\n    let ctime = now;\n\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (occupiedEntry && occupiedEntry.type === 'directory')\n      throw Error('The supplied path is a directory.');\n\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    if (parentEntry === undefined) {\n      const subDirIndex = parentPath.indexOf('/', 1);\n      if (subDirIndex !== -1) {\n        const parentArgPath = parentPath.substr(subDirIndex);\n        await this.mkdir({\n          path: parentArgPath,\n          directory: options.directory,\n          recursive: true,\n        });\n      }\n    }\n\n    if (!encoding && !this.isBase64String(data))\n      throw Error('The supplied data is not valid base64 content.');\n\n    if (occupiedEntry !== undefined) {\n      if (occupiedEntry.content instanceof Blob) {\n        throw Error(\n          'The occupied entry contains a Blob object which cannot be appended to.',\n        );\n      }\n\n      if (occupiedEntry.content !== undefined && !encoding) {\n        data = btoa(atob(occupiedEntry.content) + atob(data));\n      } else {\n        data = occupiedEntry.content + data;\n      }\n      ctime = occupiedEntry.ctime;\n    }\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'file',\n      size: data.length,\n      ctime: ctime,\n      mtime: now,\n      content: data,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Delete a file from disk\n   * @param options options for the file delete\n   * @return a promise that resolves with the deleted file data result\n   */\n  async deleteFile(options: DeleteFileOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) throw Error('File does not exist.');\n    const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n      IDBKeyRange.only(path),\n    ]);\n    if (entries.length !== 0) throw Error('Folder is not empty.');\n\n    await this.dbRequest('delete', [path]);\n  }\n\n  /**\n   * Create a directory.\n   * @param options options for the mkdir\n   * @return a promise that resolves with the mkdir result\n   */\n  async mkdir(options: MkdirOptions): Promise<void> {\n    const path: string = this.getPath(options.directory, options.path);\n    const doRecursive = options.recursive;\n    const parentPath = path.substr(0, path.lastIndexOf('/'));\n\n    const depth = (path.match(/\\//g) || []).length;\n    const parentEntry = (await this.dbRequest('get', [parentPath])) as EntryObj;\n    const occupiedEntry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (depth === 1) throw Error('Cannot create Root directory');\n    if (occupiedEntry !== undefined)\n      throw Error('Current directory does already exist.');\n    if (!doRecursive && depth !== 2 && parentEntry === undefined)\n      throw Error('Parent directory must exist');\n\n    if (doRecursive && depth !== 2 && parentEntry === undefined) {\n      const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n      await this.mkdir({\n        path: parentArgPath,\n        directory: options.directory,\n        recursive: doRecursive,\n      });\n    }\n    const now = Date.now();\n    const pathObj: EntryObj = {\n      path: path,\n      folder: parentPath,\n      type: 'directory',\n      size: 0,\n      ctime: now,\n      mtime: now,\n    };\n    await this.dbRequest('put', [pathObj]);\n  }\n\n  /**\n   * Remove a directory\n   * @param options the options for the directory remove\n   */\n  async rmdir(options: RmdirOptions): Promise<void> {\n    const { path, directory, recursive } = options;\n    const fullPath: string = this.getPath(directory, path);\n\n    const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n\n    if (entry === undefined) throw Error('Folder does not exist.');\n\n    if (entry.type !== 'directory')\n      throw Error('Requested path is not a directory');\n\n    const readDirResult = await this.readdir({ path, directory });\n\n    if (readDirResult.files.length !== 0 && !recursive)\n      throw Error('Folder is not empty');\n\n    for (const entry of readDirResult.files) {\n      const entryPath = `${path}/${entry.name}`;\n      const entryObj = await this.stat({ path: entryPath, directory });\n      if (entryObj.type === 'file') {\n        await this.deleteFile({ path: entryPath, directory });\n      } else {\n        await this.rmdir({ path: entryPath, directory, recursive });\n      }\n    }\n\n    await this.dbRequest('delete', [fullPath]);\n  }\n\n  /**\n   * Return a list of files from the directory (not recursive)\n   * @param options the options for the readdir operation\n   * @return a promise that resolves with the readdir directory listing result\n   */\n  async readdir(options: ReaddirOptions): Promise<ReaddirResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    const entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (options.path !== '' && entry === undefined)\n      throw Error('Folder does not exist.');\n\n    const entries: string[] = await this.dbIndexRequest(\n      'by_folder',\n      'getAllKeys',\n      [IDBKeyRange.only(path)],\n    );\n    const files = await Promise.all(\n      entries.map(async e => {\n        let subEntry = (await this.dbRequest('get', [e])) as EntryObj;\n        if (subEntry === undefined) {\n          subEntry = (await this.dbRequest('get', [e + '/'])) as EntryObj;\n        }\n        return {\n          name: e.substring(path.length + 1),\n          type: subEntry.type,\n          size: subEntry.size,\n          ctime: subEntry.ctime,\n          mtime: subEntry.mtime,\n          uri: subEntry.path,\n        };\n      }),\n    );\n    return { files: files };\n  }\n\n  /**\n   * Return full File URI for a path and directory\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async getUri(options: GetUriOptions): Promise<GetUriResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    return {\n      uri: entry?.path || path,\n    };\n  }\n\n  /**\n   * Return data about a file\n   * @param options the options for the stat operation\n   * @return a promise that resolves with the file stat result\n   */\n  async stat(options: StatOptions): Promise<StatResult> {\n    const path: string = this.getPath(options.directory, options.path);\n\n    let entry = (await this.dbRequest('get', [path])) as EntryObj;\n    if (entry === undefined) {\n      entry = (await this.dbRequest('get', [path + '/'])) as EntryObj;\n    }\n    if (entry === undefined) throw Error('Entry does not exist.');\n\n    return {\n      type: entry.type,\n      size: entry.size,\n      ctime: entry.ctime,\n      mtime: entry.mtime,\n      uri: entry.path,\n    };\n  }\n\n  /**\n   * Rename a file or directory\n   * @param options the options for the rename operation\n   * @return a promise that resolves with the rename result\n   */\n  async rename(options: RenameOptions): Promise<void> {\n    await this._copy(options, true);\n    return;\n  }\n\n  /**\n   * Copy a file or directory\n   * @param options the options for the copy operation\n   * @return a promise that resolves with the copy result\n   */\n  async copy(options: CopyOptions): Promise<CopyResult> {\n    return this._copy(options, false);\n  }\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    return { publicStorage: 'granted' };\n  }\n\n  /**\n   * Function that can perform a copy or a rename\n   * @param options the options for the rename operation\n   * @param doRename whether to perform a rename or copy operation\n   * @return a promise that resolves with the result\n   */\n  private async _copy(\n    options: CopyOptions,\n    doRename = false,\n  ): Promise<CopyResult> {\n    let { toDirectory } = options;\n    const { to, from, directory: fromDirectory } = options;\n\n    if (!to || !from) {\n      throw Error('Both to and from must be provided');\n    }\n\n    // If no \"to\" directory is provided, use the \"from\" directory\n    if (!toDirectory) {\n      toDirectory = fromDirectory;\n    }\n\n    const fromPath = this.getPath(fromDirectory, from);\n    const toPath = this.getPath(toDirectory, to);\n\n    // Test that the \"to\" and \"from\" locations are different\n    if (fromPath === toPath) {\n      return {\n        uri: toPath,\n      };\n    }\n\n    if (isPathParent(fromPath, toPath)) {\n      throw Error('To path cannot contain the from path');\n    }\n\n    // Check the state of the \"to\" location\n    let toObj;\n    try {\n      toObj = await this.stat({\n        path: to,\n        directory: toDirectory,\n      });\n    } catch (e) {\n      // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n      const toPathComponents = to.split('/');\n      toPathComponents.pop();\n      const toPath = toPathComponents.join('/');\n\n      // Check the containing directory of the \"to\" location exists\n      if (toPathComponents.length > 0) {\n        const toParentDirectory = await this.stat({\n          path: toPath,\n          directory: toDirectory,\n        });\n\n        if (toParentDirectory.type !== 'directory') {\n          throw new Error('Parent directory of the to path is a file');\n        }\n      }\n    }\n\n    // Cannot overwrite a directory\n    if (toObj && toObj.type === 'directory') {\n      throw new Error('Cannot overwrite a directory with a file');\n    }\n\n    // Ensure the \"from\" object exists\n    const fromObj = await this.stat({\n      path: from,\n      directory: fromDirectory,\n    });\n\n    // Set the mtime/ctime of the supplied path\n    const updateTime = async (path: string, ctime: number, mtime: number) => {\n      const fullPath: string = this.getPath(toDirectory, path);\n      const entry = (await this.dbRequest('get', [fullPath])) as EntryObj;\n      entry.ctime = ctime;\n      entry.mtime = mtime;\n      await this.dbRequest('put', [entry]);\n    };\n\n    const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n    switch (fromObj.type) {\n      // The \"from\" object is a file\n      case 'file': {\n        // Read the file\n        const file = await this.readFile({\n          path: from,\n          directory: fromDirectory,\n        });\n\n        // Optionally remove the file\n        if (doRename) {\n          await this.deleteFile({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n\n        let encoding;\n        if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n          encoding = Encoding.UTF8;\n        }\n\n        // Write the file to the new location\n        const writeResult = await this.writeFile({\n          path: to,\n          directory: toDirectory,\n          data: file.data,\n          encoding: encoding,\n        });\n\n        // Copy the mtime/ctime of a renamed file\n        if (doRename) {\n          await updateTime(to, ctime, fromObj.mtime);\n        }\n\n        // Resolve promise\n        return writeResult;\n      }\n      case 'directory': {\n        if (toObj) {\n          throw Error('Cannot move a directory over an existing object');\n        }\n\n        try {\n          // Create the to directory\n          await this.mkdir({\n            path: to,\n            directory: toDirectory,\n            recursive: false,\n          });\n\n          // Copy the mtime/ctime of a renamed directory\n          if (doRename) {\n            await updateTime(to, ctime, fromObj.mtime);\n          }\n        } catch (e) {\n          // ignore\n        }\n\n        // Iterate over the contents of the from location\n        const contents = (\n          await this.readdir({\n            path: from,\n            directory: fromDirectory,\n          })\n        ).files;\n\n        for (const filename of contents) {\n          // Move item from the from directory to the to directory\n          await this._copy(\n            {\n              from: `${from}/${filename.name}`,\n              to: `${to}/${filename.name}`,\n              directory: fromDirectory,\n              toDirectory,\n            },\n            doRename,\n          );\n        }\n\n        // Optionally remove the original from directory\n        if (doRename) {\n          await this.rmdir({\n            path: from,\n            directory: fromDirectory,\n          });\n        }\n      }\n    }\n    return {\n      uri: toPath,\n    };\n  }\n\n  /**\n   * Function that performs a http request to a server and downloads the file to the specified destination\n   *\n   * @param options the options for the download operation\n   * @returns a promise that resolves with the download file result\n   */\n  public downloadFile = async (\n    options: DownloadFileOptions,\n  ): Promise<DownloadFileResult> => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const response = await fetch(options.url, requestInit);\n    let blob: Blob;\n\n    if (!options.progress) blob = await response.blob();\n    else if (!response?.body) blob = new Blob();\n    else {\n      const reader = response.body.getReader();\n\n      let bytes = 0;\n      const chunks: (Uint8Array | undefined)[] = [];\n\n      const contentType: string | null = response.headers.get('content-type');\n      const contentLength: number = parseInt(\n        response.headers.get('content-length') || '0',\n        10,\n      );\n\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) break;\n\n        chunks.push(value);\n        bytes += value?.length || 0;\n\n        const status: ProgressStatus = {\n          url: options.url,\n          bytes,\n          contentLength,\n        };\n\n        this.notifyListeners('progress', status);\n      }\n\n      const allChunks = new Uint8Array(bytes);\n      let position = 0;\n      for (const chunk of chunks) {\n        if (typeof chunk === 'undefined') continue;\n\n        allChunks.set(chunk, position);\n        position += chunk.length;\n      }\n\n      blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n    }\n\n    const result = await this.writeFile({\n      path: options.path,\n      directory: options.directory ?? undefined,\n      recursive: options.recursive ?? false,\n      data: blob,\n    });\n\n    return { path: result.uri, blob };\n  };\n\n  private isBase64String(str: string): boolean {\n    try {\n      return btoa(atob(str)) == str;\n    } catch (err) {\n      return false;\n    }\n  }\n}\n\ninterface EntryObj {\n  path: string;\n  folder: string;\n  type: 'directory' | 'file';\n  size: number;\n  ctime: number;\n  mtime: number;\n  uri?: string;\n  content?: string | Blob;\n}\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","WebPlugin","constructor","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","requestInit","buildRequestInit","options","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","this","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","result","writeFile","directory","_a","recursive","_b","data","uri","initDb","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","subEntry","e","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","Encoding","UTF8","writeResult","contents","filename","str","err","_debug"],"sourceRoot":""}