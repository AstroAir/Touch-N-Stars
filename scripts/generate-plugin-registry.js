/**
 * Plugin Registry Generator
 * 
 * This script automatically generates the plugin registry file by scanning the plugins directory
 * It should be run as part of your build process
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get current directory name in ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const PLUGINS_DIR = path.join(__dirname, '../src/plugins');
const REGISTRY_FILE = path.join(PLUGINS_DIR, 'pluginRegistry.js');
const PLUGIN_STRUCTURE_REQUIREMENTS = {
  index: 'index.js',
  metadata: 'plugin.json'
};

// Header for the generated file
const FILE_HEADER = `/**
 * DO NOT EDIT THIS FILE MANUALLY
 * 
 * This file is automatically generated during the build process
 * It contains imports and registry info for all available plugins
 */

`;

/**
 * Get all subdirectories in the plugins directory (each should be a plugin)
 * @returns {Array<string>} Array of plugin directory names
 */
function getPluginDirectories() {
  return fs.readdirSync(PLUGINS_DIR, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .filter(dirent => dirent.name !== 'node_modules') // Skip node_modules
    .map(dirent => dirent.name);
}

/**
 * Verify if a directory is a valid plugin by checking for required files
 * @param {string} pluginDir - Plugin directory name
 * @returns {boolean} - True if directory contains required plugin files
 */
function isValidPluginDirectory(pluginDir) {
  const fullPath = path.join(PLUGINS_DIR, pluginDir);
  const hasIndexFile = fs.existsSync(path.join(fullPath, PLUGIN_STRUCTURE_REQUIREMENTS.index));
  const hasMetadataFile = fs.existsSync(path.join(fullPath, PLUGIN_STRUCTURE_REQUIREMENTS.metadata));
  
  return hasIndexFile && hasMetadataFile;
}

/**
 * Generate import statements for all plugins
 * @param {Array<string>} validPlugins - List of valid plugin directory names
 * @returns {string} - Generated import statements
 */
function generateImports(validPlugins) {
  return validPlugins.map(plugin => {
    return `import ${plugin.replace(/-/g, '')}Plugin from './${plugin}/index.js';\n` +
           `import ${plugin.replace(/-/g, '')}Metadata from './${plugin}/plugin.json';`;
  }).join('\n');
}

/**
 * Generate plugin registry entries
 * @param {Array<string>} validPlugins - List of valid plugin directory names
 * @returns {string} - Generated registry entries
 */
function generateRegistryEntries(validPlugins) {
  return validPlugins.map(plugin => {
    const normalizedName = plugin.replace(/-/g, '');
    return `  {
    id: '${plugin}',
    module: ${normalizedName}Plugin,
    metadata: ${normalizedName}Metadata
  }`;
  }).join(',\n');
}

/**
 * Main function to generate the plugin registry file
 */
function generatePluginRegistry() {
  console.log('Generating plugin registry...');
  
  // Get all plugin directories
  const allPluginDirs = getPluginDirectories();
  console.log(`Found ${allPluginDirs.length} potential plugin directories`);
  
  // Filter for valid plugin directories
  const validPlugins = allPluginDirs
    .filter(dir => isValidPluginDirectory(dir))
    .filter(dir => dir !== 'pluginRegistry.js'); // Skip registry file
  
  console.log(`Found ${validPlugins.length} valid plugins: ${validPlugins.join(', ')}`);
  
  // Generate the registry file content
  const imports = generateImports(validPlugins);
  const registryEntries = generateRegistryEntries(validPlugins);
  
  const fileContent = `${FILE_HEADER}// Plugin imports
${imports}

// Plugin registry
export const pluginRegistry = [
${registryEntries}
];`;

  // Write the file
  fs.writeFileSync(REGISTRY_FILE, fileContent);
  console.log(`Plugin registry generated at: ${REGISTRY_FILE}`);
}

// Run the generator
generatePluginRegistry();